#!/usr/bin/env perl
use strict;
use warnings;
use encoding 'utf8';
use 5.14.1;

use constant AUTHOR     => 'Antonio Feitosa aka TeeBSD <https://twitter.com/teebsd>';
use constant LICENSE    => 'http://opensource.org/licenses/BSD-2-Clause';
use Env qw(HOME);

use Data::Dumper;
use File::Path qw(make_path remove_tree);
use File::Fetch;
use Digest::SHA;
use Archive::Extract;
#use Cwd;

my $program;
my %config;

$program = 'brew';

my $base_dir;
$base_dir = "$HOME/.kornbrew";

%config = (
    base_dir        => $base_dir,
    formula_dir     => "$base_dir/Formulas",
    library_dir     => "$base_dir/Library",
    build_dir       => "$base_dir/.builds",
    install_dir     => "$HOME/opt/bin",
);

undef $base_dir;

sub usage {
    #say Dumper(['$program',$program], ['$base_dir', $base_dir], ['%config', %config]);
    say 'usage: brew [ search | install | list | doctor | uninstall ] [ package_name ]';
    exit 1;

}

sub check_dirs {
    my $dirname;
    for (keys %config) {
        $dirname = $config{$_};
        if (! -d $dirname) {
            make_path($dirname, { verbose => 1 }) or die $!;
            say 'Created: '.$dirname;
        }
    }
}

sub list_folder {
    my $path = shift or undef;
    my $item;
    my @result;
    opendir(DIR, $path) or die $!;
    push(@result,$item) while ($item = readdir(DIR));
    closedir(DIR);
    return @result;
}

sub search_inside_folder { 
    my $path = shift or undef;
    my $query = shift or undef;
    my @listed_like_ls;
    my @result;
    @listed_like_ls = list_folder($path);
    foreach (@listed_like_ls) {
        if (defined $query) {
            /$query/ && push (@result, $_);
        } else {
            /\w+/ && push (@result, $_);
        }
    }
    return @result;
}

sub brew_search {
    my $formula = shift or undef;
    say foreach (search_inside_folder($config{'formula_dir'}, $formula));
}

sub brew_list { 
    my $formula = shift or undef;
    say foreach (search_inside_folder($config{'library_dir'}, $formula));
}

sub checked_sha {
    my $alg=1;
    my $file = shift or undef;
    my $sha_check = shift or undef;
    my $sha = Digest::SHA->new($alg);
    if (-e $file) {
        $sha->addfile($file);
        if ($sha->hexdigest eq $sha_check) {
            return 1;
        }
    } else {
        say "File [$file] not found!";
    }
        return 0;
}

sub fetch_package {
    my $url = shift or die $!;
    my $formula = shift or die $!;
    my $ff = File::Fetch->new(uri => "$url");
    my $dirname = "$config{'build_dir'}/$formula/";
    if (! -d $dirname) { make_path($dirname, { verbose => 1 }) or die $!; }
    $File::Fetch::WARN = 0;
    say "Fetching $url";
    my $where = $ff->fetch(to => $dirname);
    my $filename = $ff->output_file;
    #say "Fetched filename: $filename";
    #say "Fetched in dirname: $dirname";
}

sub extract_file {
    my $file = shift or die $!;
    my $target = shift or die $!;
    my $extracted_path;
    my $ae = Archive::Extract->new(archive => $file);
    if (-d "$target") {
        say "Extracting $file";
        $ae->extract(to => "$target");
        $extracted_path = $ae->extract_path;
        return "$extracted_path";
    } else {
        say "Target: [$target] does not exist!";
        exit 1;
    }
}

sub url_to_filename {
    my $url = shift or die $!;
    my @ar_url = split (/\//, $url);
    return $ar_url[$#ar_url];
}

sub formula_is_installed {
    my $formula = shift or usage;
    if (-d "$config{'library_dir'}/$formula") {
        return 1;
    } else {
        return 0;
    }
}

sub brew_install {
    my $formula = shift or usage;
    my $formula_path = "$config{'formula_dir'}/$formula"; 
    my $build_path = "$config{'build_dir'}/$formula"; 
    my $path_downloaded_file;
    my $file_name;
    my $formula_selected;
    my $result_checked_sha;
    my $extracted_path;
    my $current_dir;
    my @listed_like_ls;
    my $installed_path = "$config{'library_dir'}/$formula";
    my $formula_bin_folder;
    if (formula_is_installed($formula)) { say "Formula is already installed!"; exit 1; }
    if (-e $formula_path) {
        push (@INC, "$formula_path");
        require Formula;
        $formula_selected = Formula->new($installed_path);
        say "Formula : $formula_selected->{name}";
        say "Homepage: $formula_selected->{homepage}";
        $file_name = url_to_filename($formula_selected->{url});
        $path_downloaded_file = "$build_path/$file_name";
        if (! -d $build_path) { make_path($build_path, { verbose => 1 }) or die $!; }
        $result_checked_sha = checked_sha($path_downloaded_file,$formula_selected->{sha1});
        if (! ((-e $path_downloaded_file) && $result_checked_sha)) { fetch_package($formula_selected->{url},$formula); }
        if (-e $path_downloaded_file) {
            $extracted_path = extract_file($path_downloaded_file,$build_path);
            #say "extracted_path: $extracted_path";
        } else {
            say "Download file missed! [$path_downloaded_file]";
            exit 1
        }
        if (-d $extracted_path) {
            chdir $extracted_path;
            #say "CWD: ".getcwd;
            $formula_selected->install();
        } else {
            say "Package dir missed! [$extracted_path]";
        }
        if (-d $installed_path) {
            chdir $installed_path;
            #say "CWD: ".getcwd;
            say "Installed: $installed_path";
            my $formula_bin_folder = "$installed_path/bin";
            @listed_like_ls = list_folder("$installed_path/bin");
            symlink ("$formula_bin_folder/$_","$config{'install_dir'}/$_") foreach (search_inside_folder($formula_bin_folder));
        } else {
            say "Installed dir missed! [$installed_path]";
        }

    } else {
        say "Formula [$formula] does not exist!";
        exit 1;
    }
}

sub brew_doctor {
    my $path_dir = $config{'install_dir'};
    my $path_file;
    my $target_file;
    foreach (search_inside_folder($path_dir)) {
        $path_file = "$path_dir/$_";
        if (-l $path_file) {
            $target_file = readlink ($path_file);
            if (! -e $target_file) {
                remove_tree($path_file, { verbose => 1 }) or die $!;
            }
        }
    }
}

sub brew_uninstall {
    my $formula = shift or usage; 
    if (formula_is_installed($formula)) {
        remove_tree("$config{'library_dir'}/$formula", { verbose => 1 }) or die $!;
    } else { 
        say "Formula is NOT installed!";
        exit 1;
    }
}

sub main {
    check_dirs;
    if (! @ARGV) {
        usage;
    } else {
        given ($ARGV[0]) {
            when ('search') { brew_search($ARGV[1]); }
            when ('install') { brew_install $ARGV[1]; }
            when ('list') { brew_list $ARGV[1]; }
            when ('doctor') { brew_doctor $ARGV[1]; }
            when ('uninstall') { brew_uninstall $ARGV[1]; }
            default { usage; }
        }
    }
}

main;
